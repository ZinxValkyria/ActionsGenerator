name: MY PRODUCTION PIPELINE

on:
  push:
    branches:
      - staging
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  # First Job: Run Python Scan 1 (Snyk for Python vulnerabilities)
  python_scan_1:
    name: Run Snyk to check for Python vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Requirements
        run: pip install -r requirements.txt
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Second Job: Run End-to-End testing and unit tests
  End_to_End_Tests_Route_Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run End-to-End Tests
        run: python -m pytest tests/test_routes.py

  # Third Job: Test S3 Connection
  Test_S3_Connection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run S3 Connection Test
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_FILE_KEY: ${{ secrets.S3_FILE_KEY }}
        run: python -m pytest tests/test_s3_bucket_connection.py

  # Fourth Job: Test if file exists in S3
  Test_file_exists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run S3 File Exists Test
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_FILE_KEY: ${{ secrets.S3_FILE_KEY }}
        run: python -m pytest tests/test_s3_file_exists.py

  # Fifth Job: Run Snyk to scan Terraform files
  snyk_infra:
    name: Run Snyk to scan Terraform files
    runs-on: ubuntu-latest
    needs: [Test_file_exists, Test_S3_Connection, End_to_End_Tests_Route_Testing, python_scan_1]
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      - name: Run terraform fmt to check formatting
        run: terraform fmt
        working-directory: terraform

      - name: Run terraform validate to check syntax
        run: terraform validate
        working-directory: terraform

      - name: Run Snyk to check all Terraform files for security issues
        continue-on-error: true
        uses: snyk/actions/iac@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          path: terraform/

  # Job to create .env file (to be used in later jobs)
  env_creation:
    runs-on: ubuntu-latest
    steps:
      - name: Create .env file
        run: echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env

  # Sixth Job: Build and Push Docker Image
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: snyk_infra
    outputs:
      IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Create newrelic.ini
        run: echo "${{ secrets.NEW_RELIC_CONFIG2 }}" > newrelic.ini

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_API_KEY }}

      - name: Set Docker image tag
        id: docker_tag
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"

      - name: Build Docker Image
        env:
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }}

  # Seventh Job: Terraform Plan and Apply
  terraform_plan:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build_and_push
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Populate secrets.auto.tfvars
        run: |
          cat <<EOF > secrets.auto.tfvars
          cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID }}"
          new_relic_license_key = "${{ secrets.NEW_RELIC_LICENSE_KEY }}"
          EOF

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -var="image_tag=${{ needs.build_and_push.outputs.IMAGE_TAG }}" --auto-approve

      - name: Cleanup Secrets
        run: rm -f secrets.auto.tfvars
