name: MY NEW PIPELINE

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write  # Add if you're using OIDC tokens for authentication

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_API_KEY }}

          
      - name: Set Docker image tag
        id: docker_tag
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"
          
      - name: Build Docker Image
        env:
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }} # License Key from Secrets
        run: |
          # Create newrelic.ini dynamically
          cat <<EOF > newrelic.ini
          [newrelic]
          license_key = $NEW_RELIC_LICENSE_KEY
          app_name = My Application
          log_level = info
          distributed_tracing.enabled = true
          EOF

          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }} .
        
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }}

  apply:
    name: Terraform Apply
    needs: [build_and_push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Populate secrets.auto.tfvars
        run: |
          echo "cloudflare_api_token = \"${{ secrets.CLOUDFLARE_API_TOKEN }}\"" >> secrets.auto.tfvars
          echo "cloudflare_zone_id = \"${{ secrets.CLOUDFLARE_ZONE_ID }}\"" >> secrets.auto.tfvars
          echo "new_relic_license_key = \"${{ secrets.NEW_RELIC_LICENSE_KEY }}\"" >> secrets.auto.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=secrets.auto.tfvars

  destroy:
    name: Terraform Destroy
    needs: [apply]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Populate secrets.auto.tfvars
        run: |
          echo "cloudflare_api_token = \"${{ secrets.CLOUDFLARE_API_TOKEN }}\"" >> secrets.auto.tfvars
          echo "cloudflare_zone_id = \"${{ secrets.CLOUDFLARE_ZONE_ID }}\"" >> secrets.auto.tfvars
          echo "new_relic_license_key = \"${{ secrets.NEW_RELIC_LICENSE_KEY }}\"" >> secrets.auto.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
