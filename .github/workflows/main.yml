
name: MY NEW PIPELINE

on:
  workflow_dispatch:

permissions: write-all

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-latest
    
    outputs:
      IMAGE_TAG: ${{ steps.docker_tag.outputs.IMAGE_TAG }}  # Output IMAGE_TAG for next job
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_API_KEY }}
          
      - name: Set Docker image tag
        id: docker_tag
        run: |
          IMAGE_TAG="${GITHUB_SHA::7}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::$IMAGE_TAG"  # Set IMAGE_TAG as output for the job
      
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }} .
        
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/actions_generator:${{ env.IMAGE_TAG }}

  approve:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Request Approval
        run: echo "Waiting for manual approval..."

  apply:
    name: Terraform Apply 
    uses: ./.github/workflows/terraform-apply.yml
    needs: [build_and_push]  # Ensure this runs after the approval job
    secrets: inherit
    with:
      IMAGE_TAG: ${{ needs.build_and_push.outputs.IMAGE_TAG }}  # Pass IMAGE_TAG to the apply job

  destroy:
    name: Terraform Destroy
    uses: ./.github/workflows/terraform-destroy.yml
    needs: [apply]
    secrets: inherit
=======
name: "Terraform test GH actions"

on:
  workflow_dispatch:
    paths:
      - 'terraform/**'
env:
  TF_LOG: INFO
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform  # Ensure this points to your Terraform config directory

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: populate secrets.auto.tfvars
        run: |
          cat <<EOF >> secrets.auto.tfvars
          cloudflare_api_token = "${{secrets.CLOUDFLARE_API_TOKEN}}"
          cloudflare_zone_id = "${{secrets.CLOUDFLARE_ZONE_ID}}"
          new_relic_license_key = "${{secrets.NEW_RELIC_LICENSE_KEY}}"
          EOF

      - name: Terraform format
        id: fmt
        run: terraform fmt

      - name: Terraform init
        id: init
        run: terraform init

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform apply
        id: apply
        run: terraform apply --auto-approve  # Correctly reference the environment variable

      - name: Terraform destroy
        id: destroy
        run: terraform destroy --auto-approve  # Correctly reference the environment variable
 

